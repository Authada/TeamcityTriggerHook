{namespace stash.config.example.hook.simple}

/**
 * @param config
 * @param? errors
 */
{template .formContents}

    {call aui.form.radioField}
         {param id: 'useQueue' /}
         {param legendContent: 'Trigger type' /}
         {param fields: [[
                        'id': 'false',
                        'labelText': 'Trigger VCS root check',
                        'value': 'false',
                        'descriptionText': 'This will make the VCS root to check for changes, triggering builds in all branches',
                        'isChecked': $config['useQueue'] ? $config['useQueue'] == 'false' :  false
                        ],
                        [
                        'id': 'true',
                        'labelText': 'Queue build configuration',
                        'value': 'true',
                        'descriptionText': 'This will queue only the build configuration selected',
                        'isChecked': $config['useQueue'] ? $config['useQueue'] == 'true' :  true
                        ]]
         /}
         {param errorTexts: $errors ? $errors['useQueue'] : null /}
         {param isRequired: true /}
         {param isDisabled: false /}
    {/call}

    {call aui.form.textField}
        {param id: 'bitbuckerUrl' /}
        {param value: $config['bitbuckerUrl'] /}
        {param labelContent: 'Bitbucker Base Url of project' /}
        {param descriptionText: 'A link in comment will be added to teamcity build' /}
        {param extraClasses: 'long' /}
        {param errorTexts: $errors ? $errors['bitbuckerUrl'] : null /}
    {/call}

    {call aui.form.textField}
        {param id: 'url' /}
        {param value: $config['url'] /}
        {param labelContent: 'Teamcity Server Address' /}
        {param descriptionText: 'Server Address' /}
        {param extraClasses: 'long' /}
        {param errorTexts: $errors ? $errors['url'] : null /}
    {/call}

    {call aui.form.textField}
        {param id: 'username' /}
        {param value: $config['username'] /}
        {param labelContent: 'Teamcity Username' /}
        {param descriptionText: 'User Name' /}
        {param extraClasses: 'long' /}
        {param errorTexts: $errors ? $errors['url'] : null /}
    {/call}

    {call aui.form.passwordField}
        {param id: 'password' /}
        {param value: $config['password'] /}
        {param labelContent: 'Password' /}
        {param descriptionText: 'User Password' /}
        {param extraClasses: 'long' /}
        {param errorTexts: $errors ? $errors['url'] : null /}
    {/call}

    <hr />

    <h3>Advanced Configuration</h3>
    <h4>########################################################################</h4>
    <h6>Ensure VCS root "checking interval" is set to random high value and VCS trigger is enabled for the configuration, when vcs trigger is used.</h6>
    <h6>Or ensure VCS trigger is disable when build trigger is enabled</h6>

    {call aui.form.textField}
        {param id: 'masterRule' /}
        {param value: $config['masterRule'] /}
        {param labelContent: 'Master' /}
        {param descriptionText: 'VCS Roots Ids or BuildConfiguration Ids To Trigger. Space-delimited. Case-sensitive.' /}
        {param extraClasses: 'long' /}
        {param errorTexts: $errors ? $errors['masterRule'] : null /}
    {/call}

    {call aui.form.textField}
        {param id: 'bugFixRule' /}
        {param value: $config['bugFixRule'] /}
        {param labelContent: 'BugFix' /}
        {param descriptionText: 'VCS Roots Ids or BuildConfiguration Ids To Trigger. Space-delimited. Case-sensitive.' /}
        {param extraClasses: 'long' /}
        {param errorTexts: $errors ? $errors['bugFixRule'] : null /}
    {/call}

    {call aui.form.textField}
        {param id: 'featureRule' /}
        {param value: $config['featureRule'] /}
        {param labelContent: 'Features' /}
        {param descriptionText: 'VCS Roots Ids or BuildConfiguration Ids To Trigger. Space-delimited. Case-sensitive.' /}
        {param extraClasses: 'long' /}
        {param errorTexts: $errors ? $errors['featureRule'] : null /}
    {/call}

    {call aui.form.textField}
        {param id: 'hotfixRule' /}
        {param value: $config['hotfixRule'] /}
        {param labelContent: 'HotFix' /}
        {param descriptionText: 'VCS Roots Ids or BuildConfiguration Ids To Trigger. Space-delimited. Case-sensitive.' /}
        {param extraClasses: 'long' /}
        {param errorTexts: $errors ? $errors['hotfixRule'] : null /}
    {/call}

    {call aui.form.textField}
        {param id: 'releaseRule' /}
        {param value: $config['releaseRule'] /}
        {param labelContent: 'Release' /}
        {param descriptionText: 'VCS Roots Ids or BuildConfiguration Ids To Trigger. Space-delimited. Case-sensitive.' /}
        {param extraClasses: 'long' /}
        {param errorTexts: $errors ? $errors['releaseRule'] : null /}
    {/call}

    <div class="field-group">
        <label for="Custom Branch Definition">Custom Branch Regx</label>
        <input id="BranchDefinition" style="max-width: 200px" class="text" type="text" name="BranchDefinition" value="{($config['BranchDefinition'] != null) ? $config['BranchDefinition'] : ''}">
        <div class="description">
            Regular expression to match custom branchs, does not apply to master/bugfix/feature/hotfix/release
        </div>
        {(($errors) ? '<div class="error">' + $errors['branchOptionsBranches'] + '</div>' : '')|noAutoescape}
        &nbsp;
        <input id="BranchCustomTypes" style="max-width: 400px" class="text" type="text" name="BranchCustomTypes" value="{($config['BranchCustomTypes'] != null) ? $config['BranchCustomTypes'] : ''}">
        <div class="description">
            Vcs to trigger. Space-delimited. Case-sensitive.
        </div
    </div>
{/template}
