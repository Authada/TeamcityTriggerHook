{namespace com.trimble.tekla.teamcity}

/**
 * Renders Builds tab contents in hook configuration user interface
 */
{template .repositoryListenersTab}
    {literal}
        <input id="repositoryListenersJson" name="repositoryListenersJson" type="hidden" />
    {/literal}
    {call aui.form.textField}
        {param id: 'referenceRegexp' /}
        {param fieldWidth: 'long' /}
        {param labelContent: getText('triggers.regex') /}
        {param infoMessage: getText('triggers.regex.info') /}
    {/call}
    {call aui.form.textField}
        {param id: 'listenerTargetId' /}
        {param fieldWidth: 'long' /}
        {param labelContent: getText('triggers.target') /}
        {param infoMessage: getText('triggers.target.info') /}
    {/call}
    {call aui.form.selectField}
        {param id: 'listenerTarget' /}
        {param fieldWidth: 'short' /}
        {param labelContent: getText('triggers.type') /}
        {param options: [
            ['text' : 'build', 'value' : 'build'],
            ['text' : 'vcs', 'value' : 'vcs']
        ]/}
    {/call}
    <div class="field-group">
        {call aui.form.label}
            {param forField : 'expand-advanced-trigger' /}
            {param content : getText('triggers.advanced') /}
        {/call}
        {call aui.expander.trigger}
            {param id: 'expand-advanced-trigger' /}
            {param contentId: 'advanced-settings-content' /}
            {param tag: 'button' /}
            {param content: getText('triggers.advanced.expand') /}
            {param replaceText: getText('triggers.advanced.collapse') /}
            {param extraClasses: 'tc-max-width aui-badge aui-button aui-button-light' /}
        {/call}
    </div>
    {call aui.expander.content}
        {param id: 'advanced-settings-content' /}
        {param content}
            {call .toggle}
                {param id: 'listenerCancelRunningBuilds' /}
                {param labelText: getText('triggers.cancel.builds') /}
            {/call}
            {call .toggle}
                {param id: 'listenerOnPullRequest' /}
                {param labelText: getText('triggers.pull.request') /}
            {/call}
            {call .toggle}
                {param id: 'triggerOnEmptyBranches' /}
                {param labelText: getText('triggers.empty.branches') /}
                {param value: true /}
            {/call}
            {call aui.form.textField}
                {param id: 'downStreamUrl' /}
                {param fieldWidth: 'medium-long' /}
                {param labelContent: getText('triggers.target') /}
                {param infoMessage: getText('triggers.configuration.info') /}
            {/call}
            {call aui.form.selectField}
                {param id: 'downStreamTriggerType' /}
                {param fieldWidth: 'medium' /}
                {param labelContent: getText('triggers.type') /}
                {param options: [
                    ['text' : 'build', 'value' : 'build'],
                    ['text' : 'rest', 'value' : 'rest'],
                    ['text' : 'new tab', 'value' : 'tab']
                ]/}
            {/call}
        {/param}
    {/call}

    {call aui.form.buttons}
        {param content}
            {call aui.form.button}
                {param id: 'addListenerButton' /}
                {param text: ' ' + getText('triggers.button.add') /}
                {param iconType: 'aui' /}
                {param iconClass: 'aui-icon-small aui-iconfont-list-add' /}
                {param iconText: 'add' /}
            {/call}
        {/param}
    {/call}

    {call aui.table}
        {param id: 'repository-triggers-table' /}
        {param extraClasses: 'aui-table-interactive' /}
        {param columnsContent}
            <colgroup>
                <col></col>
                <col></col>
                <col></col>
                <col></col>
                <col></col>
                <col></col>
            </colgroup>
        {/param}
        {param theadContent}
            <tr>
                <th colspan="2">{getText('triggers.column.regex')}</th>
                <th>{getText('triggers.target')}</th>
                <th>{getText('triggers.type')}</th>
                <th>Advanced</th>
                <th></th>
            </tr>
            <tr>
        {/param}
        {param content: '' /}
        {param tfootContent}
        {/param}
    {/call}
    {call aui.message.info}
        {param content}
            <p>{getText('triggers.info')}</p>
            <p><a href="https://github.com/TrimbleSolutionsCorporation/TeamcityTriggerHook" target="_blank">{getText('triggers.info.more')}</a></p>
        {/param}
    {/call}

{/template}
